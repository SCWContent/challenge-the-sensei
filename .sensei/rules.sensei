{
  "header": {
    "name": "Custom cookbook",
    "description": "cookbook for internal use within our company",
    "company": "SCW",
    "appsecmail": "appsecteam@senseifinancial.com",
    "rulepack_id": "85c14e96-2457-4f1d-9087-d21651fc5ac5",
    "rulePackVersion": "0.1.0",
    "enabled": true
  },
  "rules": [
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    args:\n      1:\n        value: .\n    name:\n      matches: (split|replaceAll|replaceFirst)\n    type: java.lang.String\n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Escape the regex special character for any char\"\n  actions:\n  - modifyArguments:\n      rewrite:\n        1: \"\\\"\\\\\\\\.\\\"\"\n",
        "ruleName": "Strings : Regex Use : Escape Regex Special Character for Any Char Matching",
        "ruleID": "1beed345-512b-4190-b7c3-0691d1da9e66",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "StringsRegexUseEscapeRegexSpecialCharacterforAnyCharMatching.html",
        "ruleShortDescription": "First argument uses a regex, when using a dot it might have unintended behaviour",
        "ruleErrorLevel": 2,
        "ruleEnabled": true,
        "tags": "approved;idea-default",
        "ruleScope": []
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  expression:\n    in:\n      condition: {\n        }\n    value:\n      caseSensitive: false\n      matches: .* \u0026 .*\n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Replace bitwise AND operator to logical AND operator\"\n  actions:\n  - rewrite:\n      to: \"{{#sed}}s/\u0026/\u0026\u0026/g,{{{ . }}}{{/sed}}\"\n",
        "ruleName": "Condition: use logical AND operator ",
        "ruleID": "8027b247-1d93-4b78-87e8-04a02d608056",
        "disableRuleIDs": [],
        "ruleDescriptionFile": "ConditionuselogicalANDoperator.html",
        "ruleShortDescription": "Use logical AND operator instead of bitwise AND operator ",
        "ruleErrorLevel": 2,
        "ruleEnabled": true,
        "comment": "currently marks the following code incorrectly:\n\nif (\"a \u0026 s\".equals(args)) {\n}\n\n\nTODO: have a separate model to target \u0027binary expression\u0027 with a certain operator \u0027\u0026\u0027 in this case.",
        "ruleScope": []
      }
    },
    {
      "type": "947034909c9b08d0b583170e594b0eb327933231",
      "model": {
        "yamlCode": "search:\n  methodcall:\n    followedBy:\n      methodcall:\n        args:\n          1:\n            value: \"{{{ arguments.0 }}}\"\n        name:\n          matches: \"is.*\"\n    name: \"assertThat\"\n    type: \"org.assertj.core.api.Assertions\"\n",
        "mver": 7,
        "yamlQuickFixCode": "availableFixes:\n- name: \"Fix the code by ...\"\n  actions:\n  - rewrite:\n      to: \"\"\n",
        "ruleName": "JUnit: Assert on the same value",
        "ruleID": "ef447f94-bc10-4feb-911d-e552e5ee1539",
        "disableRuleIDs": [],
        "ruleShortDescription": "The test asserts that a value is equal to itself",
        "ruleErrorLevel": 2,
        "ruleEnabled": true,
        "ruleScope": []
      }
    }
  ],
  "generators": []
}